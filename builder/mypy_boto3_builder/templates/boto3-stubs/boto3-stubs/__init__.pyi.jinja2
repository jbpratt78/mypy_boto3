# pylint: disable=unused-argument,multiple-statements
import logging
from typing import Optional, Any, overload, Union
from typing_extensions import Literal

from boto3.session import Session
from botocore.client import Client
from botocore.config import Config
from botocore.service_resource import ServiceResource

{% for service_package in package.service_packages -%}
try:
    from {{ master_module_name }}.{{ service_package.service_name.import_name }}.client import Client as {{ service_package.service_name.class_prefix }}Client
except ImportError:
    {{ service_package.service_name.class_prefix }}Client = Any
{% if service_package.service_resource -%}
try:
    from {{ master_module_name }}.{{ service_package.service_name.import_name }}.service_resource import ServiceResource as {{ service_package.service_name.class_prefix }}ServiceResource
except ImportError:
    {{ service_package.service_name.class_prefix }}ServiceResource = Any
{% endif %}
{% endfor -%}

__author__: str
__version__: str

DEFAULT_SESSION: Optional[Session] = None

def setup_default_session(
    aws_access_key_id: str = None,
    aws_secret_access_key: str = None,
    aws_session_token: str = None,
    region_name: str = None,
    botocore_session: str = None,
    profile_name: str = None,
) -> Session: ...
def set_stream_logger(
    name: str = "boto3", level: int = logging.DEBUG, format_string: Optional[str] = None
) -> None: ...
def _get_default_session() -> Session: ...

class NullHandler(logging.Handler):
    def emit(self, record: Any) -> Any:
        pass

{% for service_package in package.service_packages -%}
@overload
# pylint: disable=arguments-differ
def client(
    service_name: Literal['{{ service_package.service_name.boto3_name }}'],
    region_name: str = None,
    api_version: str = None,
    use_ssl: bool = None,
    verify: Union[str, bool] = None,
    endpoint_url: str = None,
    aws_access_key_id: str = None,
    aws_secret_access_key: str = None,
    aws_session_token: str = None,
    config: Config = None
) -> {{ service_package.service_name.class_prefix }}Client: ...
{% endfor -%}

{% for service_package in package.service_packages -%}
{% if service_package.service_resource -%}
@overload
# pylint: disable=arguments-differ
def resource(
    service_name: Literal['{{ service_package.service_name.boto3_name }}'],
    region_name: str = None,
    api_version: str = None,
    use_ssl: bool = None,
    verify: Union[str, bool] = None,
    endpoint_url: str = None,
    aws_access_key_id: str = None,
    aws_secret_access_key: str = None,
    aws_session_token: str = None,
    config: Config = None
) -> {{ service_package.service_name.class_prefix }}ServiceResource: ...
{% endif -%}
{% endfor -%}
