# mypy_boto3

Mypy-friendly type annotations for `boto3` {{ boto3_version }}.
More information can be found [here](https://github.com/vemel/mypy_boto3).

## How to use

This package by itself is not very useful, it just gives you access to all
underlying `boto3` services type annotations.

### Type checking

Make sure you have [mypy](https://github.com/python/mypy) installed ans activated in your IDE.

Install `boto3-stubs` for services that you use to get type checking working.

```bash
# You can find a full list of modules below
pip install boto3-stubs[s3, ec2]
```

Use `boto3` as usual in your project and enjoy type checking.

```python
import boto3

client = boto3.client("s3")

# Oh, it must be `Bucket`... Thanks, `mypy`!
client.create_bucket(bucket="bucket")
```

### Code auto-complete

Not a single Python IDE supports `Literal` type overloads yet (but in `VSCode` support is just around the corner).
Meanwhile, to have a nice auto-complete you can explicitly set types to help your IDE to get methods, arguments etc.

```python
import boto3_name
from mypy_boto3.ec2 import Client, ServiceResource

# now you have auto-complete for methods, arguments and even return types
client: Client = boto3.client("ec2")
resource: ServiceResource = boto3.resource("ec2")
```

## Submodules

- `all` - Type annotations for all `boto3` services.
{% if package.essential_service_names -%}
    {{ "- `essential` - Type annotations for " -}}
    {% for service_name in package.essential_service_names -%}
        {% if not loop.first -%}
            {{ " and " if loop.last else ", " -}}
        {% endif -%}
        {{ "`" -}}
        {{ service_name.boto3_name -}}
        {{ "`" -}}
    {% endfor -%}
    {{ " services" if package.essential_service_names|length > 1 else " service" -}}
    {{ ".\n" -}}
{% endif -%}
{% for service_name in package.service_names -%}
    {{ "- `" -}}
    {{ service_name.boto3_name -}}
    {{ "` - Type annotations for `" -}}
    {{ service_name.boto3_name -}}
    {{ "` service." -}}
    {{ "" if loop.last else "\n" -}}
{% endfor -%}
{{ '\n' -}}
