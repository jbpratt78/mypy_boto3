# pylint: disable=unused-argument,multiple-statements
from typing import List, Any, Union, overload
from typing_extensions import Literal

import boto3
import boto3.utils
from boto3.exceptions import ResourceNotExistsError, UnknownAPIVersionError
from boto3.resources.factory import ResourceFactory
from botocore.credentials import Credentials
from botocore.config import Config
from botocore.paginator import Paginator
from botocore.waiter import Waiter
from botocore.loader import Loader
from botocore.model import ServiceModel

{% for service_submodule, service_name in items %}
try:
    from {{ module_name }}.{{ service_name.import_name }}.{{ service_submodule.import_name }} import {{ service_submodule.class_name }} as {{ service_name.class_prefix }}{{ service_submodule.class_name }}
except ImportError:
    {{ service_name.class_prefix }}{{ service_submodule.class_name }} = Any
{% endfor %}

class Session(object):
    def __init__(
        self,
        aws_access_key_id: str = None,
        aws_secret_access_key: str = None,
        aws_session_token: str = None,
        region_name: str = None,
        botocore_session: Session = None,
        profile_name: str = None,
    ):
        self._session: ServiceModel
        self.resource_factory: ResourceFactory
        self._loader: Loader

    def __repr__(self) -> str: ...
    @property
    def profile_name(self) -> str: ...
    @property
    def region_name(self) -> str: ...
    @property
    def events(self) -> List[Any]: ...
    @property
    def available_profiles(self) -> List[Any]: ...
    def _setup_loader(self) -> None: ...
    def get_available_services(self) -> List[str]: ...
    def get_available_resources(self) -> List[str]: ...
    def get_available_partitions(self) -> List[str]: ...
    def get_available_regions(
        self,
        service_name: str,
        partition_name: str = "aws",
        allow_non_regional: bool = False,
    ) -> List[str]: ...
    def get_credentials(self) -> Credentials: ...
    def _register_default_handlers(self) -> None: ...

    {% for service_submodule in service_submodules %}
    {% for service_name in service_names %}
    {% if (service_submodule, service_name) in items %}
    @overload
    # pylint: disable=arguments-differ
    def {{ service_submodule.boto3_function_name }}(
        self,
        service_name: Literal['{{ service_name.boto3_name }}'],
        region_name: str = None,
        api_version: str = None,
        use_ssl: bool = None,
        verify: Union[str, bool] = None,
        endpoint_url: str = None,
        aws_access_key_id: str = None,
        aws_secret_access_key: str = None,
        aws_session_token: str = None,
        config: Config = None
    ) -> {{ service_name.class_prefix }}{{ service_submodule.class_name }}: ...
    {% endif %}
    {% endfor %}
    @overload
    # pylint: disable=arguments-differ
    def {{ service_submodule.boto3_function_name }}(
        self,
        service_name: str,
        region_name: str = None,
        api_version: str = None,
        use_ssl: bool = None,
        verify: Union[str, bool] = None,
        endpoint_url: str = None,
        aws_access_key_id: str = None,
        aws_secret_access_key: str = None,
        aws_session_token: str = None,
        config: Config = None
    ) -> {{ service_submodule.class_name }}: ...
    {% endfor %}
